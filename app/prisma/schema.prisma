// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  accounts          Account[]
  listings          Listing[]
  reservations      Reservation[]
  favorites         Favorite[]
}


model Account {
  id                 String    @id @default(uuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                 String    @id @default(uuid())
  title              String
  description        String
  imageSrc           String
  createdAt          DateTime  @default(now())
  category           String
  roomCount          Int
  bathroomCount      Int
  guestCount         Int
  locationValue      String
  price              Int
  reservations       Reservation[]

  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation {
  id                 String    @id @default(uuid())
  startDate          DateTime
  endDate            DateTime
  totalPrice         Int
  createdAt          DateTime  @default(now())

  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  listingId          String
  listing            Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Favorite {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
